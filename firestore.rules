rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =====================================================================
    // Funciones de Ayuda (Sin cambios)
    // =====================================================================
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function userHasRole(expectedRole) {
      return isAuthenticated() && (
        (exists(/databases/$(database)/documents/usuarios_generales/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/usuarios_generales/$(request.auth.uid)).data.rol == expectedRole)
        ||
        (exists(/databases/$(database)/documents/prestadores/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/prestadores/$(request.auth.uid)).data.rol == expectedRole)
        ||
        (exists(/databases/$(database)/documents/comercios/$(request.auth.uid)) &&
          get(/databases/$(database)/documents/comercios/$(request.auth.uid)).data.rol == expectedRole)
      );
    }

    function isProviderOrCommerce() {
      return isAuthenticated() && (
        exists(/databases/$(database)/documents/prestadores/$(request.auth.uid)) ||
        exists(/databases/$(database)/documents/comercios/$(request.auth.uid))
      );
    }

    // =====================================================================
    // Colecciones de Usuarios (Sin cambios)
    // =====================================================================
    match /usuarios_generales/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId) && request.resource.data.uid == userId && request.resource.data.rol == 'usuario';
      allow update: if isAuthenticated() && isOwner(userId) && request.resource.data.rol == resource.data.rol && request.resource.data.uid == resource.data.uid;
      allow delete: if isAuthenticated() && isOwner(userId);

      match /notifications/{notificationId} {
        allow read:   if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
      match /contactPendings/{pendingId} {
        allow read:   if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
      match /reviews_as_provider/{reviewId} {
        allow read: if true; 
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
      match /reviews_as_user/{reviewId} {
        allow read: if true; 
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
    }

    match /prestadores/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId) && request.resource.data.uid == userId && request.resource.data.rol == 'prestador';
      allow update: if isAuthenticated() && isOwner(userId) && request.resource.data.rol == resource.data.rol && request.resource.data.uid == resource.data.uid;
      allow delete: if isAuthenticated() && isOwner(userId);
      
      match /notifications/{notificationId} {
        allow read:   if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
      match /contactPendings/{pendingId} {
        allow read:   if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
      match /reviews_as_provider/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
      match /reviews_as_user/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
    }

    match /comercios/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && isOwner(userId) && request.resource.data.uid == userId && request.resource.data.rol == 'comercio';
      allow update: if isAuthenticated() && isOwner(userId) && request.resource.data.rol == resource.data.rol && request.resource.data.uid == resource.data.uid;
      allow delete: if isAuthenticated() && isOwner(userId);

      match /notifications/{notificationId} {
        allow read:   if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
      match /contactPendings/{pendingId} {
        allow read:   if isAuthenticated() && isOwner(userId);
        allow create: if isAuthenticated();
        allow update: if isAuthenticated() && isOwner(userId);
        allow delete: if isAuthenticated() && isOwner(userId);
      }
      match /reviews_as_provider/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
      match /reviews_as_user/{reviewId} {
        allow read: if true;
        allow create: if isAuthenticated() && request.resource.data.authorId == request.auth.uid;
        allow update: if isAuthenticated() && resource.data.authorId == request.auth.uid;
        allow delete: if isAuthenticated() && resource.data.authorId == request.auth.uid;
      }
    }
    
    // REGLA PARA LA NUEVA COLECCIÓN /cvs
    match /cvs/{cvId} {
      // ✅ INICIO: REGLA DE LECTURA CORREGIDA
      // Se reemplaza 'resource.data.userId' por 'cvId' para que funcione
      // incluso si el documento no existe.
      allow read: if isAuthenticated() && 
                     (request.auth.uid == cvId || isProviderOrCommerce());
      // ✅ FIN: REGLA DE LECTURA CORREGIDA

      // PERMISO DE ESCRITURA (sin cambios)
      allow create: if isAuthenticated() && request.auth.uid == cvId && 
                       request.resource.data.uid == request.auth.uid;
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.uid;
    }
    
    // =====================================================================
    // OTRAS COLECCIONES (Sin cambios)
    // =====================================================================
    match /anuncios/{anuncioId} {
      allow read: if (resource.data.status == 'active') ||
                      (isAuthenticated() && resource.data.creatorId == request.auth.uid) ||
                      userHasRole('administrador');
      allow create: if isAuthenticated() &&
                       request.resource.data.creatorId == request.auth.uid &&
                       isProviderOrCommerce();
      allow update: if isAuthenticated() && resource.data.creatorId == request.auth.uid;
      allow delete: if isAuthenticated() && resource.data.creatorId == request.auth.uid;

      match /capturas/{capturaId} {
        allow read: if (get(/databases/$(database)/documents/anuncios/$(anuncioId)).data.status == 'active') ||
                       (isAuthenticated() && get(/databases/$(database)/documents/anuncios/$(anuncioId)).data.creatorId == request.auth.uid);
        
        allow create: if isAuthenticated() &&
                           get(/databases/$(database)/documents/anuncios/$(anuncioId)).data.creatorId == request.auth.uid;
                           
        allow update: if isAuthenticated() && get(/databases/$(database)/documents/anuncios/$(anuncioId)).data.creatorId == request.auth.uid;
        allow delete: if isAuthenticated() && get(/databases/$(database)/documents/anuncios/$(anuncioId)).data.creatorId == request.auth.uid;
      }
    }

    match /paginas_amarillas/{creatorId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == creatorId;
      allow update, delete: if request.auth != null && request.auth.uid == creatorId;
    }
  }
}